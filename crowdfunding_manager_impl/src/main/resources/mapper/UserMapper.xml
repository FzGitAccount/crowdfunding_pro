<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.fz.crowdfunding.manager.dao.UserMapper">

	<resultMap id="BaseResultMap" type="com.fz.crowdfunding.bean.User">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="loginacct" property="loginacct" jdbcType="VARCHAR" />
		<result column="userpswd" property="userpswd" jdbcType="CHAR" />
		<result column="username" property="username" jdbcType="VARCHAR" />
		<result column="email" property="email" jdbcType="VARCHAR" />
		<result column="createtime" property="createtime" jdbcType="CHAR" />
	</resultMap>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from t_user
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<!-- useGeneratedKeys属性标识框架自动生成主键，keyProperty属性将主键赋值给User对象的id属性 -->
	<insert id="insert" parameterType="com.fz.crowdfunding.bean.User" useGeneratedKeys="true" keyProperty="id">
		insert into t_user (id,
		loginacct, userpswd,
		username, email, createtime
		)
		values
		(#{id,jdbcType=INTEGER}, #{loginacct,jdbcType=VARCHAR},
		#{userpswd,jdbcType=CHAR},
		#{username,jdbcType=VARCHAR},
		#{email,jdbcType=VARCHAR}, #{createtime,jdbcType=CHAR}
		)
	</insert>
	<update id="updateByPrimaryKey" parameterType="com.fz.crowdfunding.bean.User">
		update t_user
		set
		loginacct = #{loginacct,jdbcType=VARCHAR},
		username = #{username,jdbcType=VARCHAR},
		email = #{email,jdbcType=VARCHAR}
		where id = #{id,jdbcType=INTEGER}
	</update>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select id, loginacct, userpswd, username, email,
		createtime
		from t_user
		where id = #{id,jdbcType=INTEGER}
	</select>
	<select id="selectAll" resultMap="BaseResultMap">
		select id, loginacct, userpswd,
		username, email, createtime
		from t_user
	</select>

	<select id="queryUserlogin" parameterType="map" resultMap="BaseResultMap">
		select id, loginacct, userpswd,
		username, email, createtime
		from t_user where loginacct=#{loginacct} and userpswd=#{userpswd}
	</select>
	<!-- <select id="queryList" resultMap="BaseResultMap">
		select id, loginacct, userpswd,
		username, email, createtime
		from t_user limit #{startIndex},#{pagesize};
	</select>
	
	<select id="queryCount" resultType="int">
		select count(*)
		from t_user
	</select> -->
	<!-- 条件查询，动态条件 -->
	<select id="queryList" resultMap="BaseResultMap">
		select id, loginacct, userpswd,
		username, email, createtime
		from t_user 
		<where>
			<!-- 拼字符串用${},但是会有sql注入的问题不安全,所以用concat函数-->
			<if test="queryText!=null">loginacct like concat("%",#{queryText},"%")</if>
		</where>
		limit #{startIndex},#{pagesize};
	</select>
	
	<select id="queryCount" resultType="int">
		select count(*)
		from t_user
		<where>
			<if test="queryText!=null">loginacct like concat("%",#{queryText},"%")</if>
		</where>
	</select>
	<select id="queryRoleList" resultType="Role">
		select id,name from t_role
	</select>
	<select id="queryRoleListById" resultType="Integer">
		select roleid from t_user_role where userid=#{id}
	</select>
	
	<insert id="saveUserRoleRelationship">
		<foreach collection="data.ids" item="roleid" separator=";">
			insert into t_user_role(userid,roleid) values (#{userid},#{roleid})
		</foreach>
	</insert>
	
	<delete id="deleteUserRoleRelationship">
		delete from t_user_role where userid=#{userid} and roleid in
		<foreach collection="data.ids" item="roleid" open="(" separator="," close=")">
			#{roleid}
		</foreach>
	</delete>
	
	<select id="queryPermissionByUserId" parameterType="int" resultType="Permission">
		select distinct t_permission.id, t_permission.* from t_permission, t_role_permission, t_role, t_user_role, t_user
		where t_permission.id = t_role_permission.permissionid
		and t_role_permission.roleid = t_role.id
		and t_role.id = t_user_role.roleid
		and t_user_role.userid = t_user.id
		and userid = #{userid}
	</select>
</mapper>